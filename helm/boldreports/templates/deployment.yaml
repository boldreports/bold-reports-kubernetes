{{- range $service := .Values.instanceConfig}}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: {{ $.Chart.Name }}_{{ $.Chart.Version }}
    app.kubernetes.io/name: {{ $service.app }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
    {{- if $.Chart.AppVersion }}
    app.kubernetes.io/version: {{ $.Chart.AppVersion | quote }}
    {{- end }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
  name: {{ $service.app }}-deployment
  {{- if eq $.Release.Namespace "default" }}
  namespace: {{ $.Values.namespace }}
  {{- else }}
  namespace: {{ $.Release.Namespace }}
  {{- end }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $service.app }}
      app.kubernetes.io/instance: {{ $.Release.Name }}
  replicas: {{ $service.replicaCount }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ $service.app }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
    spec:
      {{- if ne $service.app "id-web" }}
      initContainers:
      - name: id-web-initialization
        image: busybox:1.28
        command: ["/bin/sh","-c"]
        args: ["while [ ! -f /application/app_data/configuration/config.json ] || [ ! -f /application/app_data/configuration/privatekeys.dat ]; do echo 'Waiting for required files...'; sleep 10; done; echo 'Both config.json and privatekeys.dat files exist.'"]
        volumeMounts:
        - mountPath: /application/app_data
          name: {{ $service.app }}-volume
      {{- end }}
      containers:
      - name: {{ $service.app }}-container
        {{- if eq $service.app "id-web" }}
        image: "{{ $.Values.image.idRepo }}/bold-identity:{{ $.Values.image.idTag }}"
        {{- else if eq $service.app "id-api" }}
        image: "{{ $.Values.image.idRepo }}/bold-idp-api:{{ $.Values.image.idTag }}"
        {{- else if eq $service.app "id-ums" }}
        image: "{{ $.Values.image.idRepo }}/bold-ums:{{ $.Values.image.idTag }}"
        {{- else if eq $service.app "reports-web" }}
        image: "{{ $.Values.image.reportsRepo }}/boldreports-server:{{ $.Values.image.reportsTag }}"
        {{- else if eq $service.app "reports-api" }}
        image: "{{ $.Values.image.reportsRepo }}/boldreports-server-api:{{ $.Values.image.reportsTag }}"
        {{- else if eq $service.app "reports-jobs" }}
        image: "{{ $.Values.image.reportsRepo }}/boldreports-server-jobs:{{ $.Values.image.reportsTag }}"
        {{- else if eq $service.app "reports-reportservice" }}
        image: "{{ $.Values.image.reportsRepo }}/boldreports-designer:{{ $.Values.image.reportsTag }}"
        {{- else if eq $service.app "reports-viewer" }}
        image: "{{ $.Values.image.reportsRepo }}/boldreports-viewer:{{ $.Values.image.reportsTag }}"
        {{- else if eq $service.app "bold-etl" }}
        image: "{{ $.Values.image.reportsRepo }}/bold-etl:{{ $.Values.image.reportsTag }}"
        {{- end }}
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: {{ $service.cpuResourceRequests }}
            memory: {{ $service.memoryResourceRequests }}
        env:
        - name: BOLD_SERVICES_HOSTING_ENVIRONMENT
          value: k8s
        {{- if eq $service.app "id-web" }}
        - name: APP_BASE_URL
          value: {{ $.Values.appBaseUrl }}
        {{- if $.Values.optionalLibs }}
        - name: INSTALL_OPTIONAL_LIBS
          value: {{ $.Values.optionalLibs }}
        {{- end }}
        {{- else if eq $service.app "id-ums" }}
        - name: BOLD_SERVICES_USE_SITE_IDENTIFIER
          value: "true"
        envFrom:
        - secretRef:
              name: bold-user-secret
        - secretRef:
              name: bold-db-secret
        - secretRef:
              name: bold-license-key
        - configMapRef:
              name: branding-config
              optional: true
        {{- end }}
        readinessProbe:
          httpGet:
            path: /health-check
            port: 80
          {{- if eq $service.app "id-web" }}
          initialDelaySeconds: 60
          {{- else }}
          initialDelaySeconds: 60
          {{- end }}
          periodSeconds: 10
          timeoutSeconds: 10
        volumeMounts:
        - mountPath: /application/app_data
          name: {{ $service.app }}-volume
        {{- if eq $service.app "id-web" }}
        - mountPath: /application/idp/web/logs/k8s
        {{- else if eq $service.app "id-api" }}
        - mountPath: /application/idp/api/logs/k8s
        {{- else if eq $service.app "id-ums" }}
        - mountPath: /application/idp/ums/logs/k8s
        {{- else if eq $service.app "reports-web" }}
        - mountPath: /application/reporting/web/logs
        {{- else if eq $service.app "reports-api" }}
        - mountPath: /application/reporting/api/logs
        {{- else if eq $service.app "reports-jobs" }}
        - mountPath: /application/reporting/jobs/logs
        {{- else if eq $service.app "reports-reportservice" }}
        - mountPath: /application/reporting/reportservice/logs
        {{- else if eq $service.app "reports-viewer" }}
        - mountPath: /application/reporting/viewer/logs
        {{- else if eq $service.app "bold-etl" }}
        - mountPath: /application/etl/etlservice/logs/k8s
        {{- end }}
          name: log4net-config-volume
      volumes:
      - name: {{ $service.app }}-volume
        persistentVolumeClaim:
          claimName: {{ $.Values.persistentVolume.name }}-claim
          readOnly: false
      - name: log4net-config-volume
        configMap:
          name: log4net-config
      {{- if $.Values.tolerationEnable }}
      tolerations:
        {{- range $.Values.tolerations }}
        - key: "{{ .key }}"
          operator: "{{ .operator }}"
          {{- if .value }}
          value: "{{ .value }}"
          {{- end }}
          effect: "{{ .effect }}"
        {{- end }}
      {{- end }}
      {{- if or $.Values.nodeAffinityEnable $.Values.podAffinityEnable $.Values.podAntiAffinityEnable}}
      affinity:
        {{- if $.Values.nodeAffinityEnable }}
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "{{ $.Values.nodeAffinity.key }}"
                operator: "{{ $.Values.nodeAffinity.operator }}"
                values:
                - "{{ $.Values.nodeAffinity.value }}"
        {{- end }} 
        {{- if $.Values.podAffinityEnable }}
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "app.kubernetes.io/name" 
                operator: "In"
                values:
                - "{{ $service.app }}"
            topologyKey: "kubernetes.io/hostname"
        {{- end }}
        {{- if $.Values.podAntiAffinityEnable }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "app.kubernetes.io/name" 
                operator: "In"
                values:
                - "{{ $service.app }}"
            topologyKey: "kubernetes.io/hostname"   
        {{- end }}                
      {{- end }}
---
{{- end }}